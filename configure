#!/bin/env bash

set -e

# Check if a package is installed
function check_installed () { dpkg -s "$1" &>/dev/null ; }

function reset_env () {
    rm -rv debian/.* debian/"$(basename "$(pwd)")" \
        debian/"$(basename "$(pwd)")".* debian/files \
        debian/{changelog,changelog.gz} 2>/dev/null || true
}

function install_theme () {

    local _install_theme_dir _install_doc

    _install_doc="/usr/share/grub/themes/polka-dots-dark"
    _install_theme_dir="/usr/share/grub/themes/polka-dots-dark"

    mkdir -p "$_install_theme_dir/{fonts,images,icons}" \
        "$_install_doc" ||

    install -vm 666 theme.txt "$_install_theme_dir/"
    install -vm 666 screenshot.png "$_install_theme_dir/screenshot.png"
    install -vm 666 copyright.images "$_install_theme_dir/"

    install -vm 666 COPYING "$_install_doc/copyright"
    install -vm 666 README.md "$_install_doc/"
    install -vm 666 CODE_OF_CONDUCT.md "$_install_doc/"
    install -vm 666 docs/version "$_install_doc/version"

    install -vm 666 fonts/* "$_install_theme_dir/fonts/"
    install -vm 666 images/* "$_install_theme_dir/images/"
    install -vm 666 icons/* "$_install_theme_dir/icons/"

}

_sign=true

_rootInstructions="$(cat <<-EOF
To install this package, you need to run this script as root.
EOF
)"

_helpInfo="$(cat <<-EOF
Configure script for the Polka-Dots Dark GRUB theme.

Usage: $0 [options]

Options:
  --no-sign         Do not sign the package. The default is to setup for
                    building a signed package. The build will fail if there
                    is no GPG key available.

  --init            Initialize the build environment.
  --install         Install the theme to the system.
  --reset           Reset the build environment.
  --help, -h        Show this help message and exit.

EOF
)"

# shellcheck disable=SC2221
# shellcheck disable=SC2222
while true ; do
    case "$1" in
        --no-sign                   ) _sign=false                                ;;
        --init                      ) echo "Setting up the build environment..." ;;
        --install                   )
            (( "$(id -u)" == 0 )) || { echo "$_rootInstructions" ; exit 1 ; }
            install_theme || { echo "Failed to install theme." ; exit 1 ; }
            exit 0
        ;;
        --reset                     ) reset_env                         ; exit 0 ;;
        --help                      ) echo -e "$_helpInfo"              ; exit 0 ;;
        --*                         ) echo "Unknown option: $1"         ; exit 1 ;;
    esac
    shift
    [ -z "$1" ] && break
done


_pass="[\033[32m\u2714\033[0m]"
_fail="[\033[31mx\033[0m]"

# Manually required system packages
_required=( dpkg-changelog git debhelper dh-make lintian )

_missing=()

echo -e "Configuring build environment...\n"

# Check if the HowToNebie APT repository is available
if ! grep -q "howtonebie" /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null; then
    echo -e "\033[31mHowToNebie APT repository is not available.\033[0m"
    echo -e "Please add the HowToNebie APT repository to your system."
    echo -e "You can find instructions here: https://repository.howtonebie.com"
    echo -e "After adding the repository to your system, run:"
    echo -e "\033[1m  sudo apt update\033[0m"
    echo -e "Then run this script again."
    exit 1
else
    echo -e "\033[32mHowToNebie APT repository is available.\033[0m\n"
fi

echo -e "üîç Checking for build requirements\n"
for pkg in "${_required[@]}"; do
    if check_installed "$pkg"; then
        echo -e "$pkg $_pass"
    else
        echo -e "$pkg $_fail"
        _missing+=("$pkg")
    fi
    sleep 0.33
done

# If _missing is not empty, print a message and exit
if [ ${#_missing[@]} -ne 0 ]; then
    echo -e "\n\n\033[31mThe following packages are missing:\033[0m"
    for pkg in "${_missing[@]}"; do
        echo -e "  - $pkg"
    done
    echo -e "\nPlease install them using your package manager (e.g., apt, dnf, or pacman).\n"
    echo -e "For example, you can run:\n"
    echo -e "\033[1m  sudo apt install ${_missing[*]}\033[0m\n"
    echo -e "After installing the missing packages, run this script again.\n"
    exit 1
fi

dpkg-changelog

if test "$_sign" = true; then
    echo -e "\nuse \`dpkg-buildpackage --build=binary  --sign-keyid=[key-id] --root-command=fakeroot\` to build signed package"
else
    echo -e "\nuse \`dpkg-buildpackage --build=binary --root-command=fakeroot\` to build the package without signing"
fi

exit 0
